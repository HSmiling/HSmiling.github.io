<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>学习解决多人零和博弈中的联盟困境</title>
      <link href="/2021/11/25/%E7%AC%94%E8%AE%B0-%E5%AD%A6%E4%B9%A0%E8%A7%A3%E5%86%B3%E5%A4%9A%E4%BA%BA%E9%9B%B6%E5%92%8C%E5%8D%9A%E5%BC%88%E4%B8%AD%E7%9A%84%E8%81%94%E7%9B%9F%E5%9B%B0%E5%A2%83/"/>
      <url>/2021/11/25/%E7%AC%94%E8%AE%B0-%E5%AD%A6%E4%B9%A0%E8%A7%A3%E5%86%B3%E5%A4%9A%E4%BA%BA%E9%9B%B6%E5%92%8C%E5%8D%9A%E5%BC%88%E4%B8%AD%E7%9A%84%E8%81%94%E7%9B%9F%E5%9B%B0%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<ul><li>2021-11-20 选定阅读论文</li><li>2021-11-21 初步阅读论文，提取研究问题及相关贡献</li><li>2021-11-22 精细阅读第1、2节相关内容，其中马尔可夫策略下的多智能体学习方法有待进一步深化，第3节已大致浏览，下一步将针对两个实例进行具体阅读和学习</li><li>2021-11-23 阅读完第3节相关内容，看到4.1节。其中智能体的神经网络构造、图8中的相关系数、补充概念中的几个知识点记得探究</li><li>2021-11-24 阅读完全篇论文，有些思路没有理清，需要带着问题再反复思考思考</li></ul><span id="more"></span><h1 id="信息概述"><a href="#信息概述" class="headerlink" title="信息概述"></a>信息概述</h1><table><thead><tr><th align="center"><div style="width: 150rpx"> 论文标题</div></th><th align="left">学习解决多人零和博弈中的联盟困境<br>《Learning to Resolve Alliance Dilemmas in Many-Player Zero-Sum Games》</th></tr></thead><tbody><tr><td align="center"><strong>关键词</strong></td><td align="left">深度强化学习、多智能体学习、协商、联盟形成（策略）</td></tr><tr><td align="center"><strong>研究问题</strong></td><td align="left">对多人零和游戏的系统研究是人工智能研究的一个关键因素。多人零和游戏中联盟的形成能够带来优势，尚不成熟的多智能体强化学习无法形成联盟。该文献中利用对称零和博弈证明多人零和博弈中存在的联盟困境；引入经济竞争的玩具模型（toy model），通过点对点合同机制增强强化学习用以发现和形成联盟；并将智能体模型纳入临时扩展合同用以进一步研究工作。</td></tr><tr><td align="center"><strong>贡献</strong></td><td align="left">- 引入联盟困境的概念，从数学上定义联盟形成的挑战 <br>- 证明目前最先进的强化学习在双人零和游戏中发挥强大作用，但未形成联盟 <br>- 为RL智能体形成联盟提供一个简洁且具有积极性的合同机制</td></tr></tbody></table><h2 id="证明联盟困境"><a href="#证明联盟困境" class="headerlink" title="证明联盟困境"></a>证明联盟困境</h2><p>该文献中通过列举symmetric three-player two-action matrix games和sequential-move games两个实例，证明联盟困境的存在以及该情况下基于梯度学习的失败，</p><h2 id="合同"><a href="#合同" class="headerlink" title="合同"></a>合同</h2><p>文献中提出一种绑定合同机制以帮助多智能体学会联盟，同时针对该合同机制进行扩展：增加时间限制和惩罚。</p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>单一环境。该文献提出的方法仅在简单环境下实验，而真实情况下联盟困境可能出现在由不同玩家具有不同策略的条件下，这方面该方法的优越性尚不可知；</p><p>文中提到symmetric zero-sum matrix games，中文翻译为对称零和矩阵博弈，而矩阵博弈是典型的非零和博弈，应该是翻译的理解上存在一些问题，这里的矩阵指的应该是结构</p><h1 id="阅读笔记"><a href="#阅读笔记" class="headerlink" title="阅读笔记"></a>阅读笔记</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>零和游戏中的 <em>Minimax theorem</em></strong></p><p>理解参考：<a href="https://zhuanlan.zhihu.com/p/344062337">博弈论笔记(九)：二人零和博弈 - 知乎 (zhihu.com)</a></p><p>双人零和博弈三个特点</p><ol><li>提供衡量算法性能的明确方法</li><li>提供直观的复杂性度量，能够为研究提供困难度排序</li><li>极小极大值定理和纳什策略得到的结果一致，故原则上不需要适应他人策略</li></ol><p><strong>双人零和游戏的局限性</strong></p><p>真实情况下人与人之间的互动常常包括着合作与竞争。双人零和游戏仅从理性的角度考虑，未考虑到真实环境具备的混合动机以及人类复杂的社会属性对动机和选择的影响。</p><ul><li><p>图一</p><p>双人零和游戏中每个玩家的收益都在0-1之间，如果双人收益和也在0-1之间成为epsilon常数和。作者进行1000次双人双动作随机游戏的直方图，纵坐标代表epslion常数和，横坐标代表epslion的值。</p><p>结论：趋于0的位置密度较低且呈三角形分布；这说明真实情况下零和博弈很是罕见</p><blockquote><p>扩展知识：Epslion-Equilibrium</p><p>参考资料: <a href="https://wiki.mbalib.com/wiki/%CE%95-%E5%9D%87%E8%A1%A1">Ε-均衡 - MBA智库百科 (mbalib.com)</a></p><p><strong>epsilon 递减策略 （epsilon-decreasing strategy）</strong>：这种强化学习技术用于分配资源，它包括两个彼此交叉的阶段：探索阶段和利用阶段。 epsilon 指探索时间与总时间的比例，随着最佳方案的相关信息越来越多，epsilon 值逐渐减小。</p></blockquote></li></ul><p>故双人零和游戏只是在探究多智能体学习的一个起点，我们需要进一步探究细节。</p><p><strong>多智能体合作方法</strong></p><ul><li><p>方法一：两智能体团队之间的零和游戏</p><p>每个团队面临内部协调问题，未解决团队战略层面的局限性，且团队的固定使得个体面临组队问题</p></li><li><p>方法二：打破零和限制</p><p>通过学习智能体以适应和塑造他们的合作者的学习，从而使得在不被利用的情况下实现协调与合作。但该方法缺乏对多智能体性能的规范度量，使得算法与算法之间的合作变得困难</p></li><li><p>方法三：给定的情景下进行工作调查合作</p><p>以消除对抗性的动态因素作为代价实现</p></li><li><p>方法四：优化可利用对手在固定背景下的最大优势</p><p>即，稳健最佳反应学习已取得进展。但是选择背景对手的必要性消除1、2点提到的一些优势</p></li></ul><p><strong>贡献</strong></p><p>关注于多玩家零和游戏的联盟形成问题，证明这类游戏中的联盟会产生社会困境且标准的独立强化学习智能体无法学习形成联盟。故提出用以增强学习智能体的简单协议，允许智能体学习点对点合同以使其建立联盟，通过一个经济竞争的玩具模型研究该协议的影响，证明合同增强智能体的优越性。同时，以通过惩罚执行的方式对模型进行扩展</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p><strong>相关工作</strong></p><p>目前在没有人类数据的情况下学习形成持久、适应性强的联盟的问题仍然存在，在该领域没有工作明确如何解决联盟形成的问题</p><p>该文献基于在竞争环境中协调智能体的方法，是第一个在该情况下应用MARL的工作，并展示允许MARL智能体形成联盟具体协议的有效性</p><p>该文献提出的MARL方法增强智能体就未来行动进行谈判、形成合同的能力</p><p><strong>多智能体强化学习（MARL）</strong></p><ul><li><p>马尔可夫博弈中的MARL</p><blockquote><p>扩展理解：</p><p><a href="https://www.cnblogs.com/suancai/p/15332556.html">多智能体博弈强化学习研究综述笔记1 - 一丨 - 博客园 (cnblogs.com)</a></p><p>多智能体马尔可夫决策过程：当智能体的数量超过一个，同时环境的改变和每个智能体的回报取决于所有智能体的动作和当前状态。</p><p>给定现有状态时，其与过去状态是条件独立的，即此随机过程具有马尔可夫性质；</p><p>MDP包含一组交互对象：智能体和环境</p><ul><li>智能体：MDP中进行机器学习的智能体，可以感知外界环境的状态进行决策、对环境做出动作并通过环境的反馈调整决策。</li><li>MDP模型中智能体外部所有事物的集合，其状态会受智能体动作的影响而改变，且上述改变可以完全或部分地被智能体感知。环境在每次决策后可能会反馈给智能体相应的奖励。</li></ul></blockquote></li><li><p>论文设置</p><p>每个智能体包括一个前馈神经网络模块和递归模块，以单个观察结果作为输入，策略日志和值估计作为输出；</p><p>采用<em><strong>advantage actor-critic（A2C）</strong></em>策略梯度方法训练智能体，该方法使用IMPALA框架扩展</p></li></ul><h2 id="联盟困境"><a href="#联盟困境" class="headerlink" title="联盟困境"></a>联盟困境</h2><p><strong>社会困境</strong></p><table><thead><tr><th align="center"></th><th align="center"><strong>A合作</strong></th><th align="center"><strong>A背叛</strong></th></tr></thead><tbody><tr><td align="center"><strong>B合作</strong></td><td align="center">R,R</td><td align="center">S,T</td></tr><tr><td align="center"><strong>B背叛</strong></td><td align="center">T,S</td><td align="center">P,P</td></tr></tbody></table><blockquote><p>充要条件：</p><ul><li><p><em>R &gt; P</em>：双方合作比双方背叛好；</p></li><li><p><em>R</em> &gt; <em>S</em>：双方合作优于被叛逃者利用；</p></li><li><p><em>T &gt; R, P &gt; S</em>：在对方固定选择时，背叛比合作损失小</p></li><li><p>2<em>R</em> &gt; <em>T</em> + <em>S</em>：双方合作优于叛逃和合作的组合（有争议，为严格要求）</p></li></ul></blockquote><p>从联盟角度而言，前三个条件为重要条件</p><p><strong>多玩家零和博弈</strong></p><p>n玩家双动作零和博弈：任何玩家效用收益与其他玩家效用损失完全平衡</p><p>在k（k&lt;n）玩家形成联盟时，帕累托存在改进可能</p><p><strong>联盟困境</strong></p><p>联盟困境是当其他玩家处于某一状态时，玩家i和j面临的社会困境</p><p>文献通过两个实例证明基于梯度的学习在联盟困境存在下无法达到合理结果</p><h3 id="实例1-Counting-alliance-dilemmas"><a href="#实例1-Counting-alliance-dilemmas" class="headerlink" title="实例1 Counting alliance dilemmas"></a>实例1 Counting alliance dilemmas</h3><p>对于3个玩家2个动作的零和游戏，进行预测：</p><img src="https://cdn.jsdelivr.net/gh/HSmiling/Images/20211125_1.png" alt="1" style="zoom:80%;" /><p>共进行1000次实验，发现54%包含联盟困境，12%为严格联盟困境。</p><ul><li><p>图二：联盟困境在p-q空间上的分布  图三</p><p><img src="https://cdn.jsdelivr.net/gh/HSmiling/Images/20211125_2.png" alt="2" style="zoom: 67%;" /><img src="https://cdn.jsdelivr.net/gh/HSmiling/Images/20211125_3.png" alt="3" style="zoom: 80%;" /></p><p>横坐标代表的是顽固智能体的政策，纵坐标是社会困境的产生数量，发现随着“顽固”智能体的政策趋于确定性时（趋于0或趋于1时），联盟困境变得更加普遍</p></li></ul><p><strong>基于梯度学习的失败</strong></p><blockquote><p>情况A（单打独斗）：$$p=1,q=0$$  只有当行为为1且完全与其他两位不同时，才能赢得游戏</p><p>情况B（匹配）：$$p=0,q=1$$  只有当行为为1且完全与其他两位不同时，才会输掉游戏</p><p>前者（情况A）存在非严格的贪婪性困境（由收益实现可能性产生）；后者（情况B）存在严格的恐惧性困境（避险心理）</p></blockquote><ul><li><p>图四：上述两种情况基于梯度学习的学习动态</p><p><img src="https://cdn.jsdelivr.net/gh/HSmiling/Images/20211125_4-1.png" alt="4-1" style="zoom: 67%;" /><img src="https://cdn.jsdelivr.net/gh/HSmiling/Images/20211125_4-2.png" alt="4-2" style="zoom: 67%;" /></p><p>图中的直线是智能体在具有相同学习速率的softmax策略梯度下的轨迹，情况B中多智能体均学会匹配顽固智能体；而情况A中两个智能体都没学会如何匹配。</p><ul><li><p>说明</p><p>匹配联盟中最佳解决方法是采取和顽固智能体相反的动作以获得$$\frac{1}{2}$$的回报；</p><p>而所有初始化的策略都收敛于两者采取与顽固智能体相同的行动以获得$$\frac{1}{3}$$的回报</p></li><li><p>情况A</p><p>最优对称联盟方案是每个阶段中$$\frac{3}{4}$$与顽固智能体选择相同，平均回报为$$\frac{3}{8}$$</p></li></ul><p>结论：面对具有确定性策略的顽固智能体时，基于梯度的学习无法找到联盟：</p><p>1）系统的学习动态趋向于一个固定点，在这个点上两个智能体永远不会适应顽固智能体，故得不到任何奖励</p><p>2）学习对代理初始状态和学习速率高度敏感，微小差异会导致轨道的巨大变化</p><blockquote><p><u>文中提到附录中有数学推导，但是没有找到附录</u></p></blockquote></li></ul><h3 id="实例2-Gifting-an-alliance-dilema"><a href="#实例2-Gifting-an-alliance-dilema" class="headerlink" title="实例2 Gifting: an alliance dilema"></a>实例2 Gifting: an alliance dilema</h3><p>关注于序贯决策博弈，实例如下：</p><blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">n个玩家在初始状态下都有m个自己颜色的筹码。轮到该玩家时，需要送出一枚自己的筹码或者选择丢弃一枚筹码。当没有玩家有自己颜色的筹码时游戏结束（n*m回合后）。赢家是拥有最多筹码的玩家，存在平局现象。获胜者收益平均为1，其余玩家收益为0.</span><br></pre></td></tr></table></figure></blockquote><p>该博弈可被解释为基于稀缺商品分配的经济竞争玩具模型 </p><ul><li><p>图五</p><p>每个玩家轮流玩1次游戏。玩家0送给玩家2一个筹码；玩家1丢弃了一个黄色筹码；玩家2送给玩家0一个红色筹码</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/HSmiling/Images/20211125_5.png" alt="5"></p><p>博弈情况分析：</p><p>“每个玩家选择丢弃”能够达到子问题完美纳什均衡，否则就是以牺牲自己为代价满足他人；</p><p>两个玩家交换芯片，实现双向平局，而非三方平局；</p><p>故存在联盟困境：两个玩家相互信任可以联盟获得更好的结果，但是只有一方背叛可以从中获益。</p><ul><li><p>图6：MARL未能收敛证明这种交易行为的政策</p><blockquote><p>智能体的神经网络构造</p><p>智能体被随机分配到 1、2 或 3 号座位，因此必须根据播放顺序进行概括。</p><p> 每个智能体的神经网络包括一个具有两层 128 个处理单元的 MLP，然后是一个具有 128 个处理单元的 LSTM。 策略和价值头是 LSTM 之上的线性层。 我们通过反向传播进行训练，使用等于事件长度的展开长度。 使用 RMSProp 优化器进行优化，衰减为 0.99，动量为 0，epsilon 为 0.001，学习率为0.000763。 该策略的熵成本为 0.001443。 我们执行使用 10 个不同随机种子初始化的训练运行，并以 95% 的置信区间绘制平均值。 </p></blockquote><p>在该游戏环境下MARL的学习曲线，A-C（纵坐标依次为奖励、丢弃、赠送）图中是三个独立的学习者迅速收敛到不给予的完美纳什平衡，导致三方平局；</p><p>D-F图中是一个玩家被复制机器人所取代（该机器人总模仿learner0的行为），此时learner0知道要赠送礼物，因为必会得到回报，最终达到两人平局。而learner1最初学会丢弃，但是发现不会提供额外奖励后，熵正则化器会导致所选择动作的随机波动</p></li></ul><img src="https://cdn.jsdelivr.net/gh/HSmiling/Images/20211125_6.png" alt="6" style="zoom:67%;" /><p><strong>得到结论</strong></p><p>强化学习在已有支持合作行为下是可适应的，但是MARL无法做出出不信任联盟中所必须的互惠行为</p><h2 id="合同-1"><a href="#合同-1" class="headerlink" title="合同"></a>合同</h2><p><strong>约束合同</strong></p><p>提出一种点对点的能合并到MARL中的完整合同。</p><p>合同渠道增强核心环境：</p><p>每时间段内，每个玩家i需要提交一份合同报价，其中包括对合伙人j的选择、对合伙人j的建议、以及自己承诺需要采取的行动，或没有合同。若两者提供相同合同，则该合同具有约束力；</p><p>环境通过提供相关智能体向量的掩膜（mask）强制执行已承诺的行动（感觉有点身份认证的意思）。每一步中，智能体会收到对最后一个时段提供合同的观察，编码为独热表示</p><p><strong>有合同意识的MARL</strong></p><ul><li><p>概念解释</p><p>采用具有2个策略头（head）的神经网络，一个用于核心环境，一个用于合同渠道。</p><p>输入：核心环境状态+前一时段的合同；根据来自核心环境的奖励，使用A2C算法对两个头（head）进行训练。智能体在学习如何在环境中表现得同时，学习如何利用具有约束力得协议与其他玩家更好协调</p></li><li><p>实验结果</p><blockquote><p>合同神经网络在前面的基础上增加线性合同头。合同策略中包含熵正则化器，其中训练和评价方法与基本实验相应</p></blockquote><ul><li><p>图7</p><p>实验1（A-C：奖励、丢弃、已签订合同）：训练2个合同增强（contract-augmented）智能体和1个A2C机器人。图中learner0和learner1为合同增强机器人，learner2为A2C机器人</p><blockquote><p>两个合同增补代理能够实现2路平局，淘汰不能签订合同的代理。 </p></blockquote><p>实验2（D-F：奖励、丢弃、已签订合同）：训练3个合同增强机器人。</p><blockquote><p>随着代理商竞争签订合同以保证他们更多的礼物，丢弃的数量减少，签订的合同数量增加</p></blockquote><img src="https://cdn.jsdelivr.net/gh/HSmiling/Images/20211125_7.png" alt="7" style="zoom:67%;" /></li><li><p>图8：证明签定合同与在游戏中积累更多筹码具有显著相关性，签约是有利的</p><p>培训后进行50场比赛，记录每个玩家的筹码总书和签订合同数，线性回归显示呈正相关</p><p>Q：参数R和P是什么？</p><p>是回归方程中的相关系数，可以看到相关系数R是0.49，故表面两个变量呈正相关</p></li></ul></li></ul><img src="https://cdn.jsdelivr.net/gh/HSmiling/Images/20211125_8.png" alt="8" style="zoom:50%;" /><p><strong>具有时限的合同</strong></p><p>扩展：签署合同后，智能体需要在b时间范围内采取已承诺行为；否则违反合同并获得相关负面奖励r<sub>c</sub>；合同破裂后，智能体可签署新合同；</p><ul><li><p>Trembling hand策略</p><p>从零开始学会签署惩罚-强制执行的合同是棘手的。智能体需要在初始阶段被迫于他人签订合同，才能使得学习成功</p></li><li><p>合同</p><p>强制智能体遵循合同报价的trembling hand策略。每一个时间步长中，合同机制会确定是否有两个智能体没有参与合同，该机制在两者中随机选择一个合同，并对每个智能体的合同的logits应用掩膜（mask）。该掩膜强制每个智能体选择给定最小概率P<sub>C</sub>的合同。</p></li><li><p>图9：</p><blockquote><p>实验环境</p><p>神经网络与图7实验中神经网络完全一致，惩罚机制中选择$$b=6,$$rc=-1,P<sub>C</sub>=0.5</p></blockquote><p>所有的智能体都是合同增强的，且在学习中都有trembling Hand策略。</p><p>最初智能体学会丢弃，并签署相关丢弃行为的合同。而经过一段时间，智能体发现签订赠予合同的优势，开始相互竞争以实现实现双人联盟获得更大奖励；且未向前面绑定合同时那样学习赠予那么多东西，这是因为合同不总是完全遵守。</p><p>A图（奖励）：开始大家都学会丢弃，而后学会结盟</p><p>B图（丢弃）：大家从所有代理丢弃的情况下，逐渐学会赠予</p><p>C图（赠予）:   NG-NG代表相互非赠予合同；G-G代表相互赠予合同</p><p>D图：签订合同数量与所得筹码数呈正相关</p></li></ul><img src="figure\20211125_9.png" alt="9" style="zoom:67%;" /><p>结论：最初智能体学会丢弃，并签署相关丢弃行为的合同。而经过一段时间，智能体发现签订赠予合同的优势，开始相互竞争以实现实现双人联盟获得更大奖励；且未向前面绑定合同时那样学习赠予那么多东西，这是因为合同不总是完全遵守。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p><strong>三项贡献</strong></p><ul><li>通过引入联盟困境的概念正式化多玩家零和博弈中的一个挑战。证明该问题普遍性存在，且基于梯度学习无法解决该问题</li><li>提出一种能够使MARL智能体组建动态团队的方法：通过使用绑定合同渠道增强智能体，使其学会使用合同作为信任潜在联盟伙伴的机制</li><li>将合同机制推广至具有约束力情况之外，智能体学会签署惩罚-强制执行的临时扩展合同</li></ul><p><strong>未来工作</strong></p><p>1）考虑在具有更大状态空间环境中的合同，处理连续联盟困境：我们可以合并一个中央智能体，如果他们希望加入联盟，他们可以推迟行动。其次，根据环境状态的抽象订立契约，而不是关于原子动作。</p><p>2）扩大合同在双边情况外的规模</p><p><strong>前景</strong></p><p>零和多人游戏引入动态团队形成和分裂问题，在多智能体方面有三条研究线：</p><ol><li>新团队的内部协调问题</li><li>团队形成过程中的社会困境问题</li><li>团队加入或离开的相关策略</li></ol><h1 id="补充知识"><a href="#补充知识" class="headerlink" title="补充知识"></a>补充知识</h1><ul><li><p><strong>零和游戏（Zero-sum games）</strong></p><blockquote><p>原理：两人对弈，总会有一个赢，一个输，如果我们把获胜计算为得1分，而输棋为-1分。则若A获胜次数为N，B的失败次数必然也为N。若A失败的次数为M，则B获胜的次数必然为M。这样，A的总分为（N-M），B的总分为（M-N），显然（N-M）+（M-N）=0，这就是零和游戏的数学表达式。</p><p>参考博客：<a href="https://www.jianshu.com/p/d5c078ba5b3f">什么是零和游戏 - 简书 (jianshu.com)</a></p></blockquote></li><li><p><strong>纳什均衡（ Nash equilibrium）</strong></p><p>每个玩家选择一个策略，当一个玩家不改变策略时，没有玩家能从改变策略中获益。</p></li><li><p><strong>对称零和矩阵博弈</strong>（symmetric zero-sum matrix games）</p><p>Q：在网络上搜集到的知识表明，矩阵博弈是非零和博弈</p></li><li><p><strong>极小极大定理</strong></p><p>简易理解：<a href="https://www.jianshu.com/p/7d7a2217c9a8">极简博弈论之一：极小极大与纳什均衡 - 简书 (jianshu.com)</a></p><p>（即，在外界条件取极小的情况下，取自身的极大值，实现自身利益最大化）</p></li><li><p><strong>多智能体强化学习</strong></p><blockquote><p>参考资料：</p><p><a href="https://blog.csdn.net/keypig_zz/article/details/81047623">(8条消息) 强化学习综述_评论很走心的博客-CSDN博客_强化学习综述</a></p><p><a href="https://blog.csdn.net/c9Yv2cf9I06K2A9E/article/details/104889969?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-2.no_search_link&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-2.no_search_link">(8条消息) 多智能体强化学习（MARL）近年研究概览_Paper weekly-CSDN博客</a></p><p><a href="https://blog.csdn.net/keypig_zz/article/details/92816033">(8条消息) 多智能体强化学习综述-Lucian Busoniu_评论很走心的博客-CSDN博客_多智能体强化学习</a></p></blockquote><ul><li><p><strong>强化学习</strong>：智能体通过与动态的环境进行“尝试-错误”式的交互而学习自己应该具有什么样的行为的问题</p><ul><li><p>解决强化学习的两种策略</p><p>1）搜索行为空间来找到在环境中表现最好的行为序列</p><p>2）使用统计学和动态规划的方法建立不同环境状态下采取不同动作的效用</p></li></ul><p>强化学习模型中，智能体的任务就是找到一个策略π，将状态映射为动作（输入状态，输出动作的这样一种函数），并且最大化长期的奖励回报。</p></li></ul></li><li><p>A2C算法</p><blockquote><p>参考资料：</p><p><a href="https://www.jianshu.com/p/428b640046aa">强化学习AC、A2C、A3C算法原理与实现！ - 简书 (jianshu.com)</a></p><p><a href="https://blog.csdn.net/u013298300/article/details/100060817">(8条消息) 策略梯度与A2C算法_李兰溪的专栏-CSDN博客_a2c</a></p></blockquote></li><li><p>softmax选择策略</p></li><li><p>序贯决策博弈</p><p>参与人的决策有先有后，后决策的参与人知道 先决策的参与人已经做出的决策，这种决策有先有后的博弈，称为<em>序贯决策博弈</em></p></li><li><p>mask for the logits</p><p>向量的掩膜（mask），通俗理解：图片中有一个圆形物体，你从一张纸上剪掉一个和该物体一模一样大小的圆，把这张纸蒙在图片上，这时候你只能看见这个圆形物体，这张纸就是mask了</p></li><li><p>独热编码表示</p><blockquote><p>使用独热编码（One-Hot Encoding），将离散特征的取值扩展到了欧式空间，离散特征的某个取值就对应欧式空间的某个点。将离散型特征使用独热编码（One-Hot Encoding），会让特征之间的距离计算更加合理。<br>参考：<a href="https://www.jianshu.com/p/42e93acacc52">https://www.jianshu.com/p/42e93acacc52</a></p></blockquote></li><li><p>MLP(Muti-Layer Perception)</p><p>多层感知器。最经典MLP包括三层：输入层、隐藏层、输出层，MLP神经网络不同层之间是全连接的</p></li><li><p>LSTM(Long Short Term Mermory network)</p><p>一种特殊的递归神经网络，可具备记忆性，特点在于可以很好解决长时依赖问题。</p></li><li><p>RMSProp：一种深度学习领域的优化算法</p><p>RMSProp 算法旨在抑制梯度的锯齿下降，但与动量相比，RMSProp 不需要手动配置学习率超参数，由算法自动完成。 更重要的是，RMSProp 可以为每个参数选择不同的学习率。</p></li><li><p>head：获取网络输出，利用提取特征做出预测</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MARL </tag>
            
            <tag> 协商策略 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于最小化内容重组并容忍不完美的工作负载预测的云视频点播服务</title>
      <link href="/2021/11/20/%E7%AC%94%E8%AE%B0-%E3%80%8AMinimizing-Content-Reorganization-and-Tolerating-Imperfect-Workload-Prediction-for-Cloud-Based-Video-on-Demand-Services%E3%80%8B/"/>
      <url>/2021/11/20/%E7%AC%94%E8%AE%B0-%E3%80%8AMinimizing-Content-Reorganization-and-Tolerating-Imperfect-Workload-Prediction-for-Cloud-Based-Video-on-Demand-Services%E3%80%8B/</url>
      
        <content type="html"><![CDATA[<ul><li><p>2021-11-16 初步阅读论文</p></li><li><p>2021-11-17 完成1、2、3节初步阅读，在基于云的Vod系统设计部分提出疑问</p></li><li><p>2021-11-18 完成第4、5节初步阅读</p></li><li><p>2021-11-20完成文档初步整理，发布初步文档，但算法、具体效果及后期扩展部分还有待进一步完善阅读，赶在ddl前的无奈~</p></li></ul><span id="more"></span><h1 id="文献信息概述"><a href="#文献信息概述" class="headerlink" title="文献信息概述"></a>文献信息概述</h1><h2 id="title"><a href="#title" class="headerlink" title="title"></a>title</h2><p>笔记|《Minimizing Content Reorganization and Tolerating Imperfect Workload Prediction for Cloud-Based Video-on-Demand Services》</p><h2 id="KeyWords"><a href="#KeyWords" class="headerlink" title="KeyWords"></a>KeyWords</h2><p>动态服务器配置、视频点播、云计算</p><h2 id="Abstract-amp-Introduction"><a href="#Abstract-amp-Introduction" class="headerlink" title="Abstract &amp; Introduction"></a>Abstract &amp; Introduction</h2><p>为降低Vod服务中的成本，该文献中提出基于现交现付模式的云平台虚拟系统以实现<strong>内容重组的最小化</strong>和<strong>不完善工作负载预测的可容忍性</strong>。</p><h2 id="研究方法"><a href="#研究方法" class="headerlink" title="研究方法"></a>研究方法</h2><p>思想：基于MW算法增加一组信道作为吸收器，以消耗未使用的带宽，从而使实例重组最小化、增强工作负载预测的安全边界。基于该思想设计相应算法。</p><h2 id="创新点"><a href="#创新点" class="headerlink" title="创新点"></a>创新点</h2><ul><li><p>第一个从最小化内容重组和容纳不完善工作负载预测的角度提出解决方案；</p></li><li><p>当达到相同水平服务器租赁成本时：</p><p>1）内容重组被最小化</p><p>2）服务器配置的安全边际降低以进一步降低成本</p><p>3）在单位时间内具有高质量配置</p></li></ul><h1 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>自主管理的内容基础设施更可取， eg:URL链接重定向</p><p>基于现收现付的云平台构建专有虚拟基础设施</p><p>最小服务化成本（支付给云服务商的资源成本）：降低成本方法——动态服务器配置或DSP</p><p>论文脉络梳理：</p><p>主要可以分为两块：（环境）虚拟系统设计（2），内容重组、满足工作负载预测的方法（3、4、5、6）</p><h2 id="基于云的Vod系统设计"><a href="#基于云的Vod系统设计" class="headerlink" title="基于云的Vod系统设计"></a>基于云的Vod系统设计</h2><p><strong>服务器配置方式选择</strong></p><p>流媒体请求服务主要受到磁盘存储、网络带宽的限制。磁盘存储与内容存储相关；网络带宽与存储内容分配请求相关。故该文献CDN服务器选择“邀请做客”的方式，采用实例存储（服务器将内容预加载到其本地实例存储中，并在请求出现时从实例存储中获取内容），关注于Instance Placement Controller。将动态服务器的配置问题抽象为二维装箱问题处理。</p><p>Q：该方式中涉及到服务器容量有限、持久性差的缺陷如何修正？</p><p><strong>动态服务器配置问题抽象化</strong></p><p>将动态服务器的配置问题抽象为二维装箱问题处理。每个服务器都是一个具有二维的箱；每个内容都是一个具有二维的项目；目标是用最少的箱子数量打包所有的项目。</p><ul><li><p>图一 基于云的Vod系统工作图</p><p><img src="https://cdn.jsdelivr.net/gh/HSmiling/Images/20211121_1.png" alt="20211121_1"></p><p>在非峰值时期，由于工作量的减少，通过动态服务器的配置可以使服务器的成本最小化</p><p><strong>关注点</strong></p><p>该文献主要关注实例放置控制器的使用对服务器成本的显著影响</p></li></ul><h2 id="思想介绍"><a href="#思想介绍" class="headerlink" title="思想介绍"></a>思想介绍</h2><p>moving window（MV）在动态服务器配置时将其转化为CCBP问题，却未考虑实例存储重组带来的影响，同时在工作负载预测不完善条件下是次优解决方法。</p><ul><li>思路：添加空余信道作为工作负载吸收器</li></ul><p><img src="https://cdn.jsdelivr.net/gh/HSmiling/Images/20211121_2.png" alt="20211121_2" style="zoom:60%;" /><img src="https://cdn.jsdelivr.net/gh/HSmiling/Images/20211121_3.png" alt="20211121_3" style="zoom:50%;" /></p><p>通过添加一个信道可以明显看出，阶段变化后，在同样释放服务器C的情况下，实例重组的现象明显得到缓解</p><h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><ul><li><p>分组通道算法</p><p>在任何给定时间段内，确保每组的所有剩余容量被吸收</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/HSmiling/Images/20211121_4.png" alt="20211121_4"></p><ul><li>周期调度算法</li></ul><p><img src="https://cdn.jsdelivr.net/gh/HSmiling/Images/20211121_5.png" alt="20211121_5"></p><h1 id="知识补充"><a href="#知识补充" class="headerlink" title="知识补充"></a>知识补充</h1><ul><li><p>CDNS(content distribution networks)内容分发网络</p><blockquote><p>基本原理是在现有Internet中新增一层网络架构，将网站的内容发布到最接近用户的网络”边缘”，使用户可以就近取得所需的内容，解决Internet网络拥塞状况，提高用户访问网站的响应速度。从技术上全面解决由于网络带宽小、用户访问量大、网点分布不均等原因，解决用户访问网站的响应速度慢的根本原因。</p><p>参考博客：<a href="https://blog.csdn.net/charlene0824/article/details/52127824">(5条消息) CDN（内容分发网络）技术概述_charlene0824的博客-CSDN博客_内容分发网络</a></p></blockquote><ul><li><p>要件</p><p>分布式存储、负载均衡、网络请求的重定向、内容管理</p><p>注：内容管理和全局网络流量管理是核心</p></li><li><p>CDN节点组成部分：负载均衡设备、高速缓存服务器</p></li><li><p>CDN两种服务器安置原则</p><ul><li><p>深入</p><p>由Akamai首创，通过在遍及全球的接入ISP中部署服务器集群来深入到ISP的接入网中，是一种高度分布式设计，维护和管理集群困难；靠近端用户，通过减少端用户和CDN集群之间链路和路由器的数量，从而改善用户感受的时延和吞吐量；</p></li><li><p>邀请做客</p><p>由Limelight和其它CDN公司采用，通过在少量关键位置建造大集群来邀请ISP做客；不是将集群放在接入ISP中，这些CDN通常将它们的集群放置在因特网交换点（IXP）；</p><p>（本文关注于服务器与用户之间的吞吐量，故选择“邀请做客”的方式）</p></li></ul></li></ul></li><li><p>视频点播服务（Video-on-demand）</p><p>eg：典型在线Vod服务提供商：youku、netFlix</p></li><li><p>pay-as-you-go cloud</p><p>现收现付（PAYG）是一种公用计算计费方法，在云计算中面向组织和最终用户实施</p><blockquote><p>PAYG 允许用户扩展，定制和配置计算资源，包括软件，存储和开发平台。资源费用基于已使用的服务，而不是整个基础架构。</p><p>公共云资源以不同方式处理和应用 PAYG 模型。例如，供应专用云服务器的用户通常根据服务器功率和使用情况以及经常性地计费。软件即服务（SaaS）的工作方式类似，用户租用软件和自定义功能。存储即服务（SaaS）计费经常轮换，因为存储需求的增加通常会逐渐增加定价。</p><p>现收现付制亦称“收付实现制”。是以货币实际收付的时间作为核算的标准，来确定本期收入和支出的一种会计核算方法。按照这种标准，任何收益，在未实际收到货币资金之前，不认为是收益;任何费用，在未实际付出货币资金之前，也不算是费用。即凡在本期实际收到款项的收益和付出款项的费用，不论其是否应属于本期，均作为本期收益和费用处理，凡在本期没有实际收到款项，即使有些收益和费用已经发生，也不作为本期的收益和费用处理。</p><p>选自：<a href="https://www.leixue.com/ask/pay-as-you-go">现收现付是什么 - 泪雪网 (leixue.com)</a></p></blockquote></li><li><p>EBS</p><p>参考文档：<a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AmazonEBS.html">Amazon Elastic Block Store (Amazon EBS) - Amazon Elastic Compute Cloud</a></p></li><li><p>装箱问题（packing problem）</p><blockquote><p>经典的装箱问题：要求把一定数量的物品放入容量相同的一些箱子中,使得每个箱子中的物品大小之和不超过箱子容量并使所用的箱子数目最少。</p><p>二维装箱问题（two-dimensional bin packing problem）：考虑两个因素——给定一张矩形的纸（布料、皮革），要求从这张纸上剪出给定的大小不一的形状，求一种剪法使得剪出的废料的面积总和最小。</p></blockquote><p>在该文献中将动态服务器配置转换为二维装箱问题，每个服务器都是一个具有二维的箱；每个内容都是一个具有二维的项目；目标是用最少的箱子数量打包所有的项目。（two-dimensional bin packing problem）</p><ul><li><p>CCBP(the class constrained bin packing problem)</p><p>有M个不同类的单位大小的项目，需要打包道N个背包中，目的是找到以恶使N 最小化的配置方案，使NP-Hard问题</p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云计算 </tag>
            
            <tag> 动态服务器配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PA00随记</title>
      <link href="/2021/11/13/PA00/"/>
      <url>/2021/11/13/PA00/</url>
      
        <content type="html"><![CDATA[<p>PA00主要是针对总体实验的了解和linux的基本使用</p><span id="more"></span><h1 id="在Linux系统中编写c程序"><a href="#在Linux系统中编写c程序" class="headerlink" title="在Linux系统中编写c程序"></a>在Linux系统中编写c程序</h1><p>先建立相关文件，并输入c程序</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi test.c</span><br></pre></td></tr></table></figure><p>程序内容如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello world! hsmiling\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存后，在命令行中对程序进行编译，最终生成程序test。指令如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gcc test.c -o test</span><br></pre></td></tr></table></figure><p>在命令行执行./test，运行程序</p><ul><li><p>扩展</p><p>编译过程实际上分为四个阶段：</p><blockquote><p>预处理   编译   汇编   连接</p></blockquote><p>详细解答可参考：<a href="https://www.cnblogs.com/lvchunhao/p/3854718.html">https://www.cnblogs.com/lvchunhao/p/3854718.html</a></p></li></ul><h1 id="什么是makefile"><a href="#什么是makefile" class="headerlink" title="什么是makefile"></a>什么是makefile</h1><p>参考博客链接：</p><p><a href="https://blog.csdn.net/weixin_44160754/article/details/109731335?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-1.no_search_link&amp;spm=1001.2101.3001.4242.2">https://blog.csdn.net/weixin_44160754/article/details/109731335?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-1.no_search_link&amp;spm=1001.2101.3001.4242.2</a></p><p><a href="https://blog.csdn.net/qq_42111463/article/details/88380812">https://blog.csdn.net/qq_42111463/article/details/88380812</a></p><p>makefile的一般格式为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">target: dependency1 dependency2</span><br><span class="line">action1</span><br><span class="line">action2</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>根据上述简单的helloworld操作，则在该目录下新建makefile文件，并加入：</p><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">test:</span></span><br><span class="line">gcc -o test test.c</span><br></pre></td></tr></table></figure><p>保存后在命令行输入make指令，再输入./test即可成功编译</p><h1 id="Tumx分屏常用指令"><a href="#Tumx分屏常用指令" class="headerlink" title="Tumx分屏常用指令"></a>Tumx分屏常用指令</h1><p>终端输入tmux进行界面：</p><blockquote><p>上下分屏：ctrl + b  再按 “</p><p>左右分屏：ctrl + b  再按 %</p><p>切换屏幕：ctrl + b  再按o</p><p>关闭一个终端：ctrl + b  再按x</p><p>上下分屏与左右分屏切换： ctrl + b  再按空格键</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PA实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win10+Debian11双系统的配置小记</title>
      <link href="/2021/11/11/Win10+Debian11%E5%8F%8C%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/"/>
      <url>/2021/11/11/Win10+Debian11%E5%8F%8C%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><span id="more"></span><h2 id="01-前期准备"><a href="#01-前期准备" class="headerlink" title="01 前期准备"></a>01 前期准备</h2><p>注：在准备安装双系统前，一定要做好备份工作</p><p>该配置需要的环境如下：</p><ul><li>一个大于等于8G的USB或DVD，作为系统的安装盘</li><li>需要配置双系统的电脑、一台可联网的设备（用于在安装过程中查漏补缺）</li><li>良好且稳定的网络环境</li></ul><h3 id="步骤一：镜像准备与下载"><a href="#步骤一：镜像准备与下载" class="headerlink" title="步骤一：镜像准备与下载"></a>步骤一：镜像准备与下载</h3><p>没有有线网络的情况下，推荐下载完整安装镜像，大小是3-4G，否则可能存在很多软件缺失，后期在安装过程中比较麻烦，在这里我选择官方镜像下载：</p><blockquote><p><a href="https://cdimage.debian.org/debian-cd/current/amd64/iso-dvd/debian-11.1.0-amd64-DVD-1.iso">debian-11.1.0-amd64-DVD-1.iso</a></p></blockquote><p><strong>特别注意</strong>：在官网上下载的完整版镜像，缺少iwlwifi相关驱动，若直接使用在安装过程中会提示驱动缺失，且在安装后可能会导致网络配置有问题，故我们需要再下载补充的驱动：</p><blockquote><p><a href="https://packages.debian.org/sid/all/firmware-iwlwifi/download">Debian – 软件包下载地址选择 – firmware-iwlwifi_20210818-1_all.deb</a></p></blockquote><h3 id="步骤二：创建空余分区"><a href="#步骤二：创建空余分区" class="headerlink" title="步骤二：创建空余分区"></a>步骤二：创建空余分区</h3><p>需要在硬盘上创建用于安装Debian系统的空余分区，运用磁盘管理器即可，我在这新分配了60G.</p><p>创建空余分区详见步骤1：<a href="https://zhuanlan.zhihu.com/p/91194918">如何拥有一个 Windows 10 和 Debian 10 的双系统 - 知乎 (zhihu.com)</a></p><h3 id="步骤三：创建U盘启动盘"><a href="#步骤三：创建U盘启动盘" class="headerlink" title="步骤三：创建U盘启动盘"></a>步骤三：创建U盘启动盘</h3><p>在这里我使用Rufus创建USB启动盘，先下载可引导USB闪存盘的工具rufus：</p><blockquote><p><a href="http://rufus.ie/zh/">Rufus - 轻松创建USB启动盘</a></p></blockquote><p>将U盘插在电脑上，打开rufus软件，引导类型选择已下载的镜像文件，分区类型选择GPT，目标系统类型选择UEFI，进行创建</p><p><strong>iwlwifi驱动的插入</strong></p><p>将上一步下载好的iwlwifi固件复制黏贴到U盘的fireware文件中</p><h2 id="02-安装过程"><a href="#02-安装过程" class="headerlink" title="02 安装过程"></a>02 安装过程</h2><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><p>注：该过程中USB需一直维持插入电脑中，直至系统安装完毕</p><ol><li><p>重新启动，在欢迎界面时进入BIOS界面更改引导顺序（thinkpad中是按F12键），选择U盘启动</p></li><li><p>进入图形化安装界面，该部分详细操作参考：</p><blockquote><p><a href="https://blog.csdn.net/weixin_51216104/article/details/120272993?ops_request_misc=%7B%22request_id%22:%22163549009816780261963151%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=163549009816780261963151&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-120272993.pc_search_result_hbase_insert&utm_term=debian11%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B&spm=1018.2226.3001.4187">(1条消息) Win10系统下安装Debian11教程_@小宋同学的博客-CSDN博客</a></p></blockquote><p>在安装过程中，我选择安装的是英文环境，由于是新手，硬盘分区直接选的是默认模式。</p><p>注意：安装过程中需要联网，有条件的可以事先准备好网线。没有有线网的情况下，我直接连了自己的热点，但真正用到的流量不多</p></li><li><p>成功进入到页面中</p></li></ol><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p><strong>问题：网络配置错误，缺少iwlwifi网卡驱动相关固件</strong></p><blockquote><p>两种解决方案：</p><p>一种是我前文提到事先在镜像中添加；</p><p>一种是跳过该步骤在安装结束后再安装驱动。</p></blockquote><p>建议使用第一种方案，因为在安装后可能存在联网问题，没有另一台联网主机的帮助可能解决问题较为艰难</p><h2 id="03-Debian的日常配置"><a href="#03-Debian的日常配置" class="headerlink" title="03 Debian的日常配置"></a>03 Debian的日常配置</h2><h3 id="sudo权限配置"><a href="#sudo权限配置" class="headerlink" title="sudo权限配置"></a>sudo权限配置</h3><ul><li><p>问题</p><p>用户使用sudo命令时报错：</p><blockquote><p>xxx is not in the sudoers file，This incident will be reported.（其中xxx是用户名）</p></blockquote><p>这是由于Debian初始情况下为将用户加入到sudo配置文件中</p></li><li><p>解决方法</p><p>运行终端，键入：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#切换至root用户权限</span></span><br><span class="line">su root</span><br><span class="line"><span class="comment">#切换到根目录下</span></span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"><span class="comment">#添加文件写权限</span></span><br><span class="line">chmod u+w ../etc/sudoers</span><br><span class="line"><span class="comment">#编辑文件</span></span><br><span class="line">vi /etc/sudoers</span><br></pre></td></tr></table></figure><p>进入文件中，找到”root ALL=(ALL:ALL) ALL”这一行，在下一行添加：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xxx ALL=(ALL:ALL) ALL <span class="comment">#xxx为用户名</span></span><br></pre></td></tr></table></figure><p>保存文件后退出，撤销文件的写权限：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod u-w ../etc/sudoers</span><br></pre></td></tr></table></figure></li></ul><h3 id="替换源的配置"><a href="#替换源的配置" class="headerlink" title="替换源的配置"></a>替换源的配置</h3><p>Debian默认的官方源下载速度较慢，由于后续的软件安装时需使用到网络安装，故安装时更换为TUNA的软件源镜像。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#打开配置文件</span></span><br><span class="line">vi /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>将源码镜像注销，将下述文本添加至配置文件中：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye main contrib non-free</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye main contrib non-free</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye-updates main contrib non-free</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye-updates main contrib non-free</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye-backports main contrib non-free</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye-backports main contrib non-free</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/debian-security bullseye-security main contrib non-free</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/debian-security bullseye-security main contrib non-free</span></span><br></pre></td></tr></table></figure><p>在终端上进行apt的更新，键入如下指令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br></pre></td></tr></table></figure><p>参考<a href="https://zhuanlan.zhihu.com/p/402267392">Debian 11 “bullseye” 配置指南 - 知乎 (zhihu.com)</a>中更换国内镜像部分</p><h3 id="中文输入配置（英文环境下）"><a href="#中文输入配置（英文环境下）" class="headerlink" title="中文输入配置（英文环境下）"></a>中文输入配置（英文环境下）</h3><p>虽然安装的是英文环境，但是中文的输入法还是不能割舍的，但是输入法的安装过程博客中众说纷纭。我选择安装fcitx，推荐下面这篇基于英文环境安装的博客，亲测有效：</p><blockquote><p><a href="https://blog.csdn.net/u010571102/article/details/103434791?ops_request_misc=&request_id=&biz_id=102&utm_term=debian11%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5%E9%85%8D%E7%BD%AE%EF%BC%88%E8%8B%B1%E6%96%87%E7%8E%AF%E5%A2%83%E4%B8%8B%EF%BC%89&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-4-103434791.pc_search_result_hbase_insert&spm=1018.2226.3001.4187">(1条消息) Debian10(英文环境)安装中文输入法fcitx_summer的博客-CSDN博客_debian fcitx</a></p></blockquote><p><strong>注意：</strong></p><p>英文环境的小伙伴在安装前切记要在locales中安装一下中文的环境，不然后续过程可能无法实现输入法的转换</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PA实验 </tag>
            
            <tag> 环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客初识</title>
      <link href="/2021/11/10/Hexo%20%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4/"/>
      <url>/2021/11/10/Hexo%20%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>2021-11-10开通了属于HSmiling的博客，该博客主要记录学习过程中的笔记及一些生活上的感受，期待能长久的更新下去。<br>那就先立个flag，一周至少一篇吧~<br>——HSmiling 写于2021.11.11</p><span id="more"></span><h2 id="Hexo常见指令"><a href="#Hexo常见指令" class="headerlink" title="Hexo常见指令"></a>Hexo常见指令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;postName&quot;</span> <span class="comment">#新建文章 </span></span><br><span class="line">hexo new page <span class="string">&quot;pageName&quot;</span> <span class="comment">#新建页面 </span></span><br><span class="line">hexo generate <span class="comment">#生成静态页面至public目录 </span></span><br><span class="line">hexo server <span class="comment">#开启预览访问端口（默认端口4000，&#x27;ctrl + c&#x27;关闭server） </span></span><br><span class="line">hexo deploy <span class="comment">#部署到GitHub </span></span><br><span class="line">hexo <span class="built_in">help</span>  <span class="comment">#查看帮助 </span></span><br><span class="line">hexo version  <span class="comment">#查看Hexo的版本</span></span><br></pre></td></tr></table></figure><p>缩写：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo n == hexo new</span><br><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy</span><br></pre></td></tr></table></figure><p>组合命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s -g #生成并本地预览</span><br><span class="line">hexo d -g #生成并上传</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 指令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo指令 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
